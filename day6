#Merge interval
  
#The solution i came up with:
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        #plan
        """
        do i need to sort????
        start by storing first interval value in start,end
        Loop through each interval in the intervals
        # store the end of the first interval in a variable
        during second loop compare the end point of the current interval with previous interval
        Will this allow us to merge two intervals????
        if b1 < a2 then combine the interval into one
        """
        res = []
        intervals.sort(key=lambda x: x[0])
        res = [intervals[0]]
        for i in range(1, len(intervals)):
            if intervals[i - 1][1] >= intervals[i][0]:
                intervals[i][0] = intervals[i - 1][0]
                intervals[i][1] = max(intervals[i - 1][1], intervals[i][1])
                res.remove(intervals[i - 1])
            res.append(intervals[i])
        print(res)
        return res

# Example 1
# intervals = [[1,3], [2,6], [8,10], [15,18]]  
# intervals[0][1] >= intervals[1][0]| intervals[1][1] >= intervals[2][0]
# 2 = 1                             |            
# [1, 3]                            | [2,6]                      
# res = [[1,3],                     res = [[1,3],  [2,6]]

#Edge cases:
#No null intervals
#start and end are good


#The efficient solution
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        res = []
        intervals.sort(key=lambda x: x[0])
        res = [intervals[0]]
        for i in range(1, len(intervals)):
            last = res[-1]
            curr = intervals[i]
            if last[1] >= curr[0]:
                last[1] = max(last[1], curr[1])
            else:
                res.append(curr)
        return res
