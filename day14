#Number of Provinces
class Solution(object):
    def findCircleNum(self, isConnected):
        """
        :type isConnected: List[List[int]]
        :rtype: int
        """
        def dfs(city):
            visited.add(city)
            for neighbor in range(n):
                if isConnected[city][neighbor] == 1 and neighbor not in visited:
                    dfs(neighbor)
        
        n = len(isConnected)
        visited = set()
        provinces = 0

        for city in range(n):
            if city not in visited:
                dfs(city)
                provinces += 1
        return provinces


# Thoughts/Summary (Super Condensed)
# 	1.	Loop through each city — if it’s not visited, run DFS on it.
# 	2.	dfs(city) means: explore all cities connected to this city.
# 	3.	In dfs, mark the current city as visited.
# 	4.	For each neighbor, if connected and not visited, call dfs(neighbor).
# 	5.	Every time you explore a city through dfs(city), you’ve found a new province.

