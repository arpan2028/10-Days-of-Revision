#Binary Tree Level Order Traversal
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[List[int]]
        """
        res = []
        if not root:
            return []
        q = deque()
        q.append(root)
        #start bfs with root in the queue.

        while q:
            level = []           
            for i in range(len(q)):
            #so this goes level by level so 3, (9,20), (15, 7)
                node = q.popleft()
                level.append(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            res.append(level)
        return res


#Maximum depth of binary tree
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: int
        """
        level = 0
        if not root:
            return 0
        q = deque([root])
        #start bfs by adding root
        
        while q:
            for i in range(len(q)):
            #so this goes level by level so 3, (9,20), (15, 7)
                node = q.popleft()
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            level += 1
        return level
